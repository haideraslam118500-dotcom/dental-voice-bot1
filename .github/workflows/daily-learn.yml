name: Daily receptionist learning

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

jobs:
  learn:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run learning script
        id: learn
        run: |
          path=$(python scripts/learn.py)
          echo "path=$path" >> "$GITHUB_OUTPUT"
      - name: Commit suggestions
        id: commit
        env:
          SUGGESTIONS_PATH: ${{ steps.learn.outputs.path }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$SUGGESTIONS_PATH"
          if git diff --cached --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            git commit -m "chore: daily receptionist suggestions"
            git push
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Open or update issue
        uses: actions/github-script@v7
        env:
          SUGGESTIONS_PATH: ${{ steps.learn.outputs.path }}
        with:
          script: |
            const fs = require('fs');
            const path = process.env.SUGGESTIONS_PATH;
            const content = fs.readFileSync(path, 'utf8');
            const match = path.match(/suggestions-(\d{4}-\d{2}-\d{2})\.md$/);
            const dateStr = match ? match[1] : new Date().toISOString().slice(0, 10);
            const title = `Daily AI Receptionist improvements ${dateStr}`;
            const codexBlock = '**Codex task**\n```\nPlease implement today\'s receptionist suggestions above in a new pull request.\n```';
            const body = `${content}\n\n${codexBlock}`;
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100,
            });
            const existing = issues.find(issue => issue.title === title);
            if (existing) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                body,
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
              });
            }
